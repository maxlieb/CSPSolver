{
	"Vars": {
		"Computer Architecture pt.2": {
			"Year": 1,
			"Time": null
		},
		"Computer Architecture pt.1": {
			"Year": 1,
			"Time": null
		},
		"Physics for software engeneres": {
			"Year": 1,
			"Time": null
		},
		"Calculus 1": {
			"Year": 1,
			"Time": null
		},
		"Calculus 2": {
			"Year": 1,
			"Time": null
		},
		"Introduction to computer science": {
			"Year": 1,
			"Time": null
		},
		"Object oriented programming": {
			"Year": 1,
			"Time": null
		},
		"Logic and discrete topics pt.1": {
			"Year": 1,
			"Time": null
		},
		"Linear Algebra": {
			"Year": 1,
			"Time": null
		},
		"Introduction to statistics and probablilty": {
			"Year": 2,
			"Time": null
		},
		"Advanced Object Oriented Programming": {
			"Year": 2,
			"Time": null
		},
		"Automates and formal languages": {
			"Year": 2,
			"Time": null
		},
		"Algorithms pt.1": {
			"Year": 2,
			"Time": null
		},
		"Data structures": {
			"Year": 2,
			"Time": null
		},
		"Software language principals": {
			"Year": 2,
			"Time": null
		},
		"Software engenering principals": {
			"Year": 2,
			"Time": null
		},
		"Design and analysis in software engenering": {
			"Year": 2,
			"Time": null
		},
		"Logic and discrete topics pt.1I": {
			"Year": 2,
			"Time": null
		},
		"Software project management": {
			"Year": 2,
			"Time": null
		},
		"Advanced Object Oriented Programming": {
			"Year": 2,
			"Time": null
		},
		"Operating Systems": {
			"Year": 3,
			"Time": null
		},
		"Introduction to Computer Networking": {
			"Year": 3,
			"Time": null
		},
		"Compilation": {
			"Year": 3,
			"Time": null
		},
		"Numerical Analysis": {
			"Year": 3,
			"Time": null
		},
		"Computability and complexity": {
			"Year": 3,
			"Time": null
		},
		"Databases": {
			"Year": 3,
			"Time": null
		},
		"Testing and quality in software engenering": {
			"Year": 3,
			"Time": null
		},
		"Computer commuincation networks": {
			"Year": 3,
			"Time": null
		},
		"Introduction to compilation": {
			"Year": 3,
			"Time": null
		},
		"Algorithms pt.2": {
			"Year": 4,
			"Time": null
		},
		"Reliability": {
			"Year": 4,
			"Time": null
		},
		"Software Security": {
			"Year": 4,
			"Time": null
		}
	},
	"Domains": {
		"Computer Architecture pt.2": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Computer Architecture pt.1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Physics for software engeneres": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Calculus 1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Calculus 2": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to computer science": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Object oriented programming": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Logic and discrete topics pt.1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Linear Algebra": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to statistics and probablilty": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Advanced Object Oriented Programming": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Automates and formal languages": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Algorithms pt.1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Data structures": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Software language principals": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Software engenering principals": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Design and analysis in software engenering": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Logic and discrete topics pt.1I": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Software project management": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Advanced Object Oriented Programming": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Operating Systems": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to Computer Networking": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Compilation": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Numerical Analysis": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Computability and complexity": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Databases": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Testing and quality in software engenering": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Computer commuincation networks": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to compilation": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Algorithms pt.2": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Reliability": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Software Security": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jul 6 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		}
	},
	"Constraints" : {
	"Computer Architecture pt.2" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Computer Architecture pt.1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Physics for software engeneres" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Calculus 1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Calculus 2" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to computer science" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Object oriented programming" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Logic and discrete topics pt.1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Linear Algebra" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to statistics and probablilty" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Advanced Object Oriented Programming" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Automates and formal languages" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Algorithms pt.1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Data structures" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Software language principals" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Software engenering principals" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Design and analysis in software engenering" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Logic and discrete topics pt.1I" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Software project management" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Advanced Object Oriented Programming" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Operating Systems" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to Computer Networking" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Compilation" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Numerical Analysis" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Computability and complexity" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Databases" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Testing and quality in software engenering" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Computer commuincation networks" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to compilation" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Algorithms pt.2" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Reliability" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Software Security" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 3])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 5 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	}
}
}