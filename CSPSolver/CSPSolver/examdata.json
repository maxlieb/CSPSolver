{
	"Vars": {
		"Computer Architecture pt.2": {
			"Year": 1,
			"Time": null
		},
		"Computer Architecture pt.1": {
			"Year": 1,
			"Time": null
		},
		"Physics for software engeneres": {
			"Year": 1,
			"Time": null
		},
		"Calculus 1": {
			"Year": 1,
			"Time": null
		},
		"Introduction to statistics and probablilty": {
			"Year": 2,
			"Time": null
		},
		"Advanced object oriented programming": {
			"Year": 2,
			"Time": null
		},
		"Automates and formal languages": {
			"Year": 2,
			"Time": null
		},
		"Algorithms pt.1": {
			"Year": 2,
			"Time": null
		},
		"Data structures": {
			"Year": 2,
			"Time": null
		},
		"Operating Systems": {
			"Year": 3,
			"Time": null
		},
		"Introduction to computer networking": {
			"Year": 3,
			"Time": null
		},
		"Compilation": {
			"Year": 3,
			"Time": null
		},
		"Numerical analysis": {
			"Year": 3,
			"Time": null
		},
		"Algorithms pt.2": {
			"Year": 4,
			"Time": null
		},
		"Reliability": {
			"Year": 4,
			"Time": null
		},
		"Software Security": {
			"Year": 4,
			"Time": null
		}
	},
	"Domains": {
		"Computer Architecture pt.2": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Computer Architecture pt.1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Physics for software engeneres": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Calculus 1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to statistics and probablilty": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Advanced object oriented programming": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Automates and formal languages": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Algorithms pt.1": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Data structures": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Operating Systems": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Introduction to computer networking": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Compilation": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Numerical analysis": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Algorithms pt.2": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Reliability": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		},
		"Software Security": {
			"Time": {
				"Ranges": [["Jun 7 2016  9:00", "Jun 30 2016  18:00", 60, "SA", "9-18", "0-60"]],
				"Values": null
			}
		}
	},
	"Constraints" : {
	"Computer Architecture pt.2" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Computer Architecture pt.1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Physics for software engeneres" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Calculus 1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to statistics and probablilty" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Advanced object oriented programming" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Automates and formal languages" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Algorithms pt.1" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Data structures" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Operating Systems" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Introduction to computer networking" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Compilation" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Numerical analysis" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Algorithms pt.2" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Reliability" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	},
	"Software Security" : {
		"FuncList" : [{
				"Name" : "NoSameYearConcurrent",
				"Function" : "lambda x, allOthers: len([j for j in [i for i in allOthers if i['Time'] and x['Year'] == i['Year']] if abs((strToDay(j['Time']) - strToDay(x['Time'])).days) < 2])"
			}, {
				"Name" : "TotalConCurrent",
				"Function" : "lambda x, allOthers:  0 if len([y for y in allOthers if y['Time'] and abs((strToTime(y['Time']) - strToTime(x['Time'])).seconds /3600) <3 ]) < 100 else 1"
			}
		],
		"CheckList" : [{
				"Name" : "NoSameYearConcurrent",
				"ArgList" : ["*"]
			}, {
				"Name" : "TotalConCurrent",
				"ArgList" : ["*"]
			}
		]
	}
}
}